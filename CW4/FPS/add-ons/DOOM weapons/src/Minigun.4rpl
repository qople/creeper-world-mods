# --Minigun-- 3/13/2024 1:37:44 PM
#Comma separated, whitespace ignored.
#List of all weapons added by this script
$$weaponsAdded:"chaingun"
 
#List of custom attributes those weapons should have on initialization
#Custom attributes in an "other" field are always included. This only matters for script input vars.
$$customAttributes:"BaseRate, MaxRate, WindUp, MoveReduction"
 
#List stat vars here. Format as weaponAttributeName. weaponOther is supported.
$chaingunBaseRate:20
$chaingunMaxRate:2
$chaingunWindUp:0.97
$chaingunRate:20
$chaingunProjSpeed:7
$chaingunDmgDepth:2.5
$chaingunDmgDist:3
$chaingunDmgMaxCells:10
$chaingunDmgIterations:1
$chaingunMeshDmg:0.4
$chaingunMeshDist:2
$chaingunMaxRange:300
$chaingunMoveReduction:0.4

if(<-slowedDown)
	if(<-*fireTimer -3 lt <-*activeWeapon "chaingun" neq ||)
		false ->slowedDown
		"Move" "moveSpeed" <-baseMoveSpeed SetRegisteredScriptVar
	endif
endif

#wind up/cool down for fire rate
if(<-*activeWeapon "chaingun" eq <-*isFPMode &&)
	<-*weaponAttributes{"chaingun"} ->chaingunStats
	#<-chaingunStats{"Rate"} ->Rate
	if(<-*fireTimer -2 gt <-Rate <-MaxRate gt &&)
		true ->slowedDown
		<-Rate <-WindUp mul <-MaxRate max ->chaingunStats{"Rate"}
		SendMsg("ItemCollected" 0)
		"Move" "moveSpeed" <-baseMoveSpeed <-MoveReduction mul SetRegisteredScriptVar
	else if(<-Rate <-BaseRate lt <-*fireTimer lte0 &&)
		<-Rate <-WindUp dup mul div <-BaseRate min ->chaingunStats{"Rate"}
		SendMsg("ItemCollected" 0)
	endif endif
	
else if(<-Rate <-BaseRate lt)
	#<-*weaponAttributes{"chaingun"} ->chaingunStats
	<-BaseRate ->chaingunStats{"Rate"}
	SendMsg("ItemCollected" 0)
endif endif

:Once
	"Move" "moveSpeed" GetRegisteredScriptVar ->baseMoveSpeed
	@SetHiddenAttributes
	@InitializeWeapons
	
	#Necessary if any new effects are added
	RegisterForMsg("WeaponEffect" "DoCustomEffects")

	RegisterForMsg("ItemCollected" "GetWeaponAttributes")
	@GetWeaponAttributes
	
	RegisterForMsg("WeaponFired" "Fire")
	
	#Make the weapon visually different from others
	RegisterForMsg("CrosshairUpdated" "CrosshairAppearance")
 
:SetHiddenAttributes
	#Hidden Stats (Affect visuals, not balance)
	#Options are Color, Trail, FireSound, FireVolume, HitSound, HitVolume,
	#EffectName, EffectScale, Path
	# <-value ->weaponColor #etc
	V3(0.4 dup dup) ->chaingunColor
	V2(0 .2) ->chaingunTrail
	0 ->chaingunPath
	"CloseClick" ->chaingunFireSound
	0.5 ->chaingunFireVolume
	"Explosion_2" ->chaingunHitSound
	0.3 ->chaingunHitVolume

:Fire
		
	
:DoCustomEffects
	#Put data into more readable vars
	<-_DATA[0] ->weapon
	<-_DATA[1] ->effectPosition
	
	#Read whatever attributes are needed for this effect
	#Repeat if necessary
	<-*weaponAttributes {<-weapon} {"SomeAttribute"} ->someAttribute
	
	#Then create the effect.
 
#Make a visual indicator by either modifying the existing crosshair's attributes
#Or by hiding it and making your own. 
:CrosshairAppearance
	<-_DATA ->crosshair

#Called whenever the ItemCollected message is sent.
#Stores the attributes of myweapon to variables with matching names.
#Note the variable names are Capitalized.
:GetWeaponAttributes
	#If you don't need all the attributes, feel free to replace this with a smaller list.
	<-*weaponAttributes{"chaingun"} GetTableKeys ->neededStats
	
	<-neededStats GetListCount 0 do
		<-neededStats[i] ->attribute
		<-*weaponAttributes{"chaingun"}{<-attribute} <-attribute ->!
	loop
 
#==============
 
#Required for the weapon pack to work.
:InitializeWeapons
	Split(RemoveWhiteSpace(<-weaponsAdded) ",") ->weaponsAdded
	RegisterScript(<-weaponsAdded[0])
	SendMsg("Initialize" <-weaponsAdded[0])
	
	