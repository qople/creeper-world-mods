# This is a template that can be used to make your own ship work in Apex Evolution!
# I have attempted to make this as easy as possible, and explain things where I can.

# IMPORTANT:
# If the module you want to add (e.g. rocket) can be found in the "modules" folder in this mod,
# USE THAT PART PATH INSTEAD OF THE VANILLA ONE OR IT WILL NOT WORK!!!!!!!!!!

# Module count is determined automatically, but their lookup names should be setup properly.
# Each module should be named "module0", "module1", and so on, with no skipped numbers.
# the "module" should be replaced with the name of the module used by the mod.
# Names supported by default are cannon, sentrygun, rocket, lathe, cryon, particlegun, and maker.
# For other modules, the name is defined in the custom_modules list below, and part names should match.

$ship_name:"The Lancer"
$ship_description:"A ship focusing on pure offensive power and maneuverability. Equipped with blasters, rockets, and a darkling.<br>Ship by Cornucanis."

# -------------------------

# Describe any custom ship modules your ship has on it. This is any module that is not one of:
# cannon, sentrygun, rocket, lathe, cryon, particlegun, and maker.
# This is a comma separated list. Whitespace is removed, and it is converted to lowercase.
# "Bertha,T H O R ,           spirit" becomes a list of ["bertha", "thor", "spirit"].
# The names of variables below should match this.

$custom_modules:""

# -------------------------

# Describe which modules are enabled by default.
# Variable name should be "start_unlocked_[modulename]".
# The first N modules of the matching name will be made active on game start, the rest will not.
# For instance, if "start_unlocked_cannon" is 2, modules "cannon0" and "cannon1" will start enabled.
# Any other cannon modules defined above will start inactive and can be picked up by upgrades at game time.
# If a variable is not defined, it is assumed to be 0.

$start_unlocked_blaster:1
$start_unlocked_lathe:1

# ---------------------------

# Define upgrade setup modes for modules.
# Variable name should be "setup_mode_[modulename]"
# Built-in modules will automatically add their modules to the upgrade pool when on the ship if applicable. This is setup mode 0, and only works on built-in modules.
# Custom modules by default have to have their upgrades manually defined below. This is setup mode 1.



# ---------------------------

# Define the primary script or controller for each custom module.
# If you are using a setup mode other than 0 (automatic), you should define this for the module.
# Variable name should be "primary_behavior_[modulename]"
# If using a controller, give the controller name. 
# If using an IRPL script, the full script path should be given, INCLUDING THE .IRPL AT THE END
# If none is given, it defaults to IRPL script 1.

# ===============================

#:turbomode
    #Self "/ApexEvolution/Ships/ship.irpl" "moveSpeed" 4.5 SetScriptVar


# Define upgrades associated with this ship. These will be added to the pool if the ship is picked for the level.
:DefineUpgrades
    CreateList >_upgrades
    Table(
        "id"            "speedup"
        "title"         "Lancer Special Upgrade: Turbo Mode"
        "description"   "Increase movement speed of Lancer and most of its weaponry."
        "effect"        "sendmsg/shipspeed/1.3, mulattr/darkling/spin_time/0.5, mulattr/heavyspirit/shot_speed/1.6"
        "rarity"        5
        "pickuplimit"   1
    ) <_upgrades swap AppendToList

:Awake
    # This must be in Awake for the description to show up properly.
    RegisterScript("ship")

:Once
    #RegisterForMsg("turbomode" dup)
    # Defines the "_upgrades" variable containing all this ship's upgrades
    @DefineUpgrades

    Self >mainShip #So the loader script knows who we are
    Self "/ApexEvolution/Ships/ship.irpl" "moveSpeed" 3.2 SetScriptVar #speedier than the average ship
	
	#reducing darkling width slightly while increasing length to accommodate the size of the ship
	Self "darkling0" getChild ->darkID
	<-darkID "/ApexEvolution/Modules/Darkling/darkling.irpl" "fire_range" <-darkID "/ApexEvolution/Modules/Darkling/darkling.irpl" "fire_range" GetScriptVar 1.2 mul SetScriptVar
	<-darkID "/ApexEvolution/Modules/Darkling/darkling.irpl" "shot_damage_distance" <-darkID "/ApexEvolution/Modules/Darkling/darkling.irpl" "shot_damage_distance" GetScriptVar 0.9 mul SetScriptVar
    @LoadShip

# Detects how many modules of the given type are attached to this ship
:DetectModuleNum
    >moduleName
    999 0 do
        if(Self <moduleName i concat GetChild -1 eq)
            i return
        endif
    loop
    999 return


# Sends a message telling the ship loader to initialize the ship and its upgrades, and scrape this script for information about it.
# THIS MUST BE CALLED FOR THIS TO WORK PROPERLY! 
:LoadShip
    RegisterScript("ship")
    SendMsg("LoadShip" 0)