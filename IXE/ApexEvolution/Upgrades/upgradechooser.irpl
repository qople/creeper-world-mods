# Governs showing the upgrade UI, and choosing which upgrades to show.
$baseUpgradeCost:9
$upgradePower:2.5
$scalingAdd:4

#GetCreeperInArea(V4(0 0 512 512) false false) ->postUpdateCreeper
#<-*preUpdateCreeper <postUpdateCreeper neq if
#    <-*preUpdateCreeper <postUpdateCreeper sub dup trace
#    <-*xpMult mul <-creeperDestroyed add ->creeperDestroyed
#    
#    true >remakeBar
#    
#    while <-creeperDestroyed <-upgradeCost gt repeat
#        <-creeperDestroyed <-upgradeCost sub ->creeperDestroyed
#        @LevelUp
#    endwhile
#else
#    pop
#endif


if(<remakeBar)
    false >remakeBar
    SendMsg("RemakeLevelBar" <-creeperDestroyed <-upgradeCost AsFloat div)
endif

if(<upgradeOnScreen)
    true SetPause
else if(<upgradeQueue)
    @ChooseUpgrades
endif endif


if(GetKeyDown("U" 1) GetEditMode &&)
    @ShowUpgrade
endif


:Once
    ElapsedTime List >upgradeSeed
    ElapsedTime 3 add 10 mul List >artifactSeed

    1.0 ->*xpMult
    0 ->*shipLevel
    0 >upgradeQueue
    CreateList >artifactsInQueue
    <baseUpgradeCost <-*shipLevel <scalingAdd add <upgradePower pow mul ->upgradeCost
    0 ->creeperDestroyed
    V4(0.8 0.8 0.8 1) V4(0 1 0 1) V4(0 0.5 1 1) V4(0.7 0 1 1) V4(1 0.2 0.2 1) V4(0.8 0.3 0 1) List >rarityColors
    "COMMON" "UNCOMMON" "RARE" "EPIC" "LEGENDARY" "ARTIFACT" List >rarityNames

    RegisterForMsg("ShowArtifact" "ShowArtifact")
    RegisterForMsg("GiveXp" dup)

:GiveXP
    <creeperDestroyed <_DATA <-*xpMult mul add >creeperDestroyed
    while <-creeperDestroyed <-upgradeCost gt repeat
        <-creeperDestroyed <-upgradeCost sub ->creeperDestroyed
        @LevelUp
    endwhile
    true >remakeBar

:LevelUp
    <-*shipLevel 1 add ->*shipLevel
    <baseUpgradeCost <-*shipLevel <scalingAdd add <upgradePower pow mul ->upgradeCost
    @ShowUpgrade
    SendMsg("LevelUp" <-*shipLevel)

:UpgradeChosen
    <-_DATA{"name"} asint >choice
    false >upgradeOnScreen
    <chosenUpgrades[<choice] >upgrade
    <-*upgradeCollected{<upgrade{"id"}} 1 add ->*upgradeCollected{<upgrade{"id"}}
    3 0 do
        SetUIActive("upgradeui" i false)
    loop
    #SetUIActive("upgradeui" <choice true)

    SendMsg("ApplyUpgrade" <upgrade)

    DeregisterForMsg("UPGRADE_CHOSEN")
    false SetPause

:ShowUpgrade
    <upgradeQueue 1 add >upgradeQueue
    #@ChooseUpgrades

:ShowArtifact
    @ShowUpgrade
    <artifactsInQueue <upgradeQueue AppendToList

# Shows the UI buttons
:ChooseUpgrades
    true SetPause
    RegisterForMsg("UPGRADE_CHOSEN" "UpgradeChosen")
    <upgradeQueue 1 sub 0 max >upgradeQueue
    <artifactsInQueue 0 do
        <artifactsInQueue[i] 1 sub >artifactsInQueue[i]
    loop
    CreateList >chosenUpgrades
    true >upgradeOnScreen
    <upgradeSeed >activeSeed

    # Check if this is an artifact choice
    if(<artifactsInQueue dup [0] eq0 &&)
        true >selectingArtifact
        <-*upgradeRarityChances >baseRarity
        List(-1 0 0 0 1 4) ->*upgradeRarityChances
        <artifactsInQueue 0 RemoveListElement
        <artifactSeed >activeSeed
    endif

    
    3 0 do
        i >uiName
        SetUIActive("upgradeui" <uiName true)
        @RandomUpgrade >thisUpgrade
        <chosenUpgrades <thisUpgrade AppendToList
        SetUIBackgroundColor("upgradeui" <uiName <rarityColors[<thisUpgrade{"rarity"}])
         
        SetUiText("upgradeui" <uiName <thisUpgrade @ConstructText)
    loop

    if(<selectingArtifact)
        <baseRarity ->*upgradeRarityChances
    endif

:RandomUpgrade
    false >isValid
    <activeSeed trace
    <-*upgradeRarityChances DeepCopy >chances
    while <isValid ! repeat
        #Set up weighted random

        0
        <-chances 0 do
            dup <-chances[i] add
        loop
        dup 1 add >maxRandNum
        <-chances ListN >weightList pop

        60 86 96 99 100
        #Pick a number, then search for that in the list to find the correct rarity
        0 <maxRandNum <activeSeed @SeedRandInt >rand
        -1
        <weightList 0 do
            if(<weightList[i] <rand gte)
                pop i break
            endif
        loop
        >rarity

        # Now that we have the rarity, pick an unweighted random upgrade from that rarity.
        <-*upgradePool[<rarity] >upgrades
        CreateList >filteredUpgrades
        <upgrades 0 do
            <upgrades[i] >upgrade

            #Check if the upgrade is valid
            true >isValid

            #Module must be unlocked
            if(<upgrade{"module"} IsNull !)
                <upgrade{"module"} >module
                if(<-*unlockedModules{<module} eq0 <-*bannedModules{<module} ||)
                    false >isValid
                endif
            endif

            # Upgrade cannot be banned
            if(<-*bannedUpgrades{<upgrade{"id"}})
                false >isValid
            endif

            # No duplicate IDs.
            <chosenUpgrades 0 do
                if(<chosenUpgrades[i]{"id"} <upgrade{"id"} eq)
                    false >isValid
                endif
            loop

            # Prerequisite must have been bought
            if(<upgrade{"prerequisite"} IsNull !)
                <upgrade{"prerequisite"} >requirementList
                <requirementList[0] >id
                <requirementList[1] >num
                if(<-*upgradeCollected{<id} dup IsNull swap <num lt ||)
                    false >isValid
                endif
            endif

            # Can't have been picked up more than the max collect num
            if(<upgrade{"pickuplimit"} dup IsNull ! swap gte0 &&)
                if(<-*upgradeCollected{<upgrade{"id"}} dup IsNull ! swap <upgrade{"pickuplimit"} gte &&)
                    false >isValid
                endif
            endif

            if(<isValid)
                <filteredUpgrades <upgrade AppendToList
            endif
        loop
        <filteredUpgrades GetListCount >isValid
        if(<isValid !)
            0 >chances[<rarity]
            null >upgrade
            
            true >isValid
            <chances 0 do
                if(<chances[i])
                    false >isValid
                endif
            loop
        else
            <filteredUpgrades[0 <filteredUpgrades GetListCount <activeSeed @SeedRandInt] >upgrade
        endif
    endwhile

    <upgrade return

:ConstructText
    >thisUpgrade
    <rarityNames[<thisUpgrade{"rarity"}] >rarityName
    <rarityName "<br><br>" <thisUpgrade{"title"} "<br><br>" <thisUpgrade{"description"} concat4 concat

# Thank you to Grabz for showing me this rand function
# This one uses a list with one element as the seed, 
# so that it can update the seed without returning anything
:SeedRandFloat
    >seed
	<seed[0] 1 add dup >seed[0] sin 10000 mul dup floor sub

#Args: min, max, seed
:SeedRandInt
    >seed >max >min
    <seed @SeedRandFloat <max <min sub mul <min add AsInt