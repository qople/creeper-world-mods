# Manages upgrade effects, specifically the "effects" attribute.
# Effects are a slash separated string, like "addmodule/cannon/1"
# This is split into a list and interpreted as arguments from left to right.
# This is CASE SENSITIVE, so please use lowercase unless giving a string argument that should be capitalized.
# Currently allowed options for effects are:

# addmodule: adds a module to the ship
# Arguments are the string name of the module, followed by an int for how many to give.
# Example: "addmodule/cannon/1" means "add 1 cannon module".

# incattr: Increments the base value for a script var on a type of module, or all modules.
# Arguments are the module name, then the variable name, then the amount to add.
# Example: "incattr/all/fire_range/2" increases the fire_range variable on all modules.
# Accepts module group notation (see below)

# setattr: Directly sets a value of a variable on a module
# Arguments are the module name, then the variable name, then the amount to add.
# Example: "setattr/cannon/shot_damage/-5000000" sets the cannon's base damage per shot to 5.
# This ignores the automatic stat tracking system, and is meant for one-off vars affected by artifacts, such as setting a flag.
# Accepts module group notation (see below)

# incmult: Same as incattr, but increments the primary (additive) multiplier instead.
# Arguments are the module name, then the variable name, then the amount to add to the multipler.
# Example: "incmult/all/fire_range/0.25" increases fire range of all modules by an additional 25% of the base value.
# Accepts module group notation (see below)

# mulattr: Same as incattr, but multiplies the secondary (exponential) multiplier instead.
# Arguments are the module name, then the variable name, then the amount to multiply by.
# "all" is a valid module name and will multiply the stat on all modules on the ship, even those not yet unlocked.
# Example: "mulattr/all/fire_range/1.25" multiplies the fire range of all modules by 1.25x, 
# no matter how many upgrades have already been collected.
# Use this sparingly, it is very powerful if stacked.
# Accepts module group notation (see below)

# sendmsg: Sends a message on a channel with the given data.
# Arguments are the message channel name, then the data to send. Data will always be sent as a string, as written.
# Example: "sendmsg/WinLevel/1" sends a message on the "WinLevel" channel with data "1" (string "1" not int 1).

# banmodule: Removes all upgrades attached to a module from the pool.
# This is all modules that get added when the module is unlocked, 
# not upgrades like module count that exist regardless.
# Argument is the module name, for example "banmodule/cannon"

# banupgrade: Removes a specific upgrade ID from the pool.
# Argument is the upgrade id, for instance "banupgrade/numcannon"

# removebehavior: Removes a specific behavior from a weapon's shot.
# Arguments are the module and behavior name
# For example: "removebehavior/cannon/basedmg" Removes the cannon's behavior named "basedmg"

# addbehavior: Adds a behavior to a weapon's shot.
# Arguments are the module, then the behavior data to add, see [TODO: LINK TO WIKI]
# For now, actually see ShotManager.irpl, line ~164 for behavior documentation
# Example: "addbehavior/cannon/framedmg/frametravel/damage/0.1" 
# adds a behavior with name "framedmg" that damages creeper with 10% 
# of the weapon's depth every frame a cannon shot exists.

# foreachartifact: Applies any of the above effects, once per artifact on the given module(s)
# Arguments are the module, then the effect, formatted normally.
# For isntance: "foreachartifact/maker/mulattr/cannon/shot_damage/1.025"
# multiplies cannon shot_damage by 1.025 for each maker artifact collected, past or future.
# Accepts module group notation (see below)

# foreachlevel: Applies any of the above effects, once per ship level
# Arguments are the effect, formatted normally.
# For isntance: "foreachlevel/mulattr/cannon/shot_damage/1.01"
# multiplies cannon shot_damage by 1.01 for each ship level, past or future.

# incconfig: adds an amount to the given JSON config on the main ship and all its children
# Arguments are the config name, the amount to add, and whether to cascade the change to child parts.
# Does not keep track of stats the same way attributes do, so don't combine it with other config effects.    

# mulconfig: multiplies the given JSON config on the main ship and all its children
# Arguments are the config name, the multiplier, and whether to apply the change to child parts.
# Does not keep track of stats the same way attributes do, so don't combine it with other config effects.

# setconfig: sets the given JSON config on the main ship and all its children
# Arguments are the config name, the new value, and whether to cascade the change to child parts.
# Does not keep track of stats the same way attributes do, so don't combine it with other config effects.


# incconfig: adds an amount to the given JSON config on the main ship and all its children
# Arguments are the config name and the amount to add.

# Any effect that modifies a stat on a module, including foreachartifact,
# Can support syntax to affect several modules at once.
# This is referred to as "group notation"
# Giving "all" for module name makes it apply to ALL modules on the ship.
# Giving "unbanned" for module name makes it apply to all modules, but not those banned by a mastery artifact.
# Giving "not_[module]" makes it apply to all modules except the one named.
# A semicolon-separated list can also be given.

:Once
    # WHY IS THIS STILL RUNNING SEVERAL TIMES
    if(<NO !)
        true >NO
        RegisterForMsg("ApplyUpgrade" dup)
        RegisterForMsg("ApplyEffect" "EffectMsgCallback")
        RegisterForMsg("LevelUp" dup)
        RegisterScript("effects")

        CreateTable ->*weaponArtifacts

        CreateTable >artifactEffects
        CreateList >levelEffects
    endif

:LevelUp
    <levelEffects 0 do
        <levelEffects[i] >effectList
        @ApplyEffect
    loop

:EffectMsgCallback
    <_DATA @ParseEffect >allEffects

    <allEffects 0 do
        <allEffects[i] >effectList

        @ApplyEffect
    loop

:ApplyUpgrade
    <_DATA >upgrade
    <upgrade{"effect"} >allEffects

    <allEffects 0 do
        <allEffects[i] >effectList

        @ApplyEffect
    loop

    if(<upgrade{"rarity"} 6 eq <upgrade "module" TableContainsKey &&)
        # Weapon artifact, update table and any "foreach" artifact effects that need changing
        <upgrade{"module"} >module
        if(<-*weaponArtifacts <module TableContainsKey !)
            CreateList ->*weaponArtifacts{<module}
        endif

        <-*weaponArtifacts{<module} <upgrade AppendToList

        <module @WeaponArtifactGet
    endif

:ApplyEffect
    <effectList[0] >topLevelEffect

    switch
        case(<topLevelEffect "addmodule" eq)
            @AddModule
        endcase
        case(<topLevelEffect "incattr" eq)
            @IncrementAttribute
        endcase
        case(<topLevelEffect "incmult" eq)
            @IncrementMultiplier
        endcase
        case(<topLevelEffect "setattr" eq)
            @SetAttribute
        endcase
        case(<topLevelEffect "mulattr" eq)
            @MultiplyAttribute
        endcase
        case(<topLevelEffect "sendmsg" eq)
            @SendMessage
        endcase
        case(<topLevelEffect "banupgrade" eq)
            @BanUpgrade
        endcase
        case(<topLevelEffect "banmodule" eq)
            @BanModule
        endcase
        case(<topLevelEffect "addbehavior" eq)
            @AddBehavior
        endcase
        case(<topLevelEffect "removebehavior" eq)
            @RemoveBehavior
        endcase
        case(<topLevelEffect "foreachartifact" eq)
            @ForEachArtifactOn
        endcase
        case(<topLevelEffect "foreachlevel" eq)
            @ForEachLevel
        endcase
        case(<topLevelEffect "incconfig" eq)
            @IncConfig
        endcase
        case(<topLevelEffect "mulconfig" eq)
            @MulConfig
        endcase
        case(<topLevelEffect "setconfig" eq)
            @SetConfig
        endcase
    endswitch

# Activates N modules of the given type.
:AddModule
    <effectList[1] >moduleName
    <effectList[2] >numToUnlock
    <-*unlockedModules{<moduleName} >numModules
    <numModules dup <numToUnlock add do
        <-*mainShip <moduleName i 1 sub concat GetChild >module
        <module true SetActive
    loop

    <numModules <numToUnlock add ->*unlockedModules{<moduleName}

:IncrementAttribute
    <effectList[1] >moduleName
    <effectList[2] >varName
    <effectList[3] >incrementAmount

    <moduleName @ParseModuleList >modules

    <modules 0 do
        <modules[i] >module
        <-*moduleStats{<module}{<varName} >attributeStats
        if(<attributeStats)
            <attributeStats[1] <incrementAmount add >attributeStats[1]
        endif
    loop

    @UpdateStat

# Sets the base value for a stat, ignoring the stat system.
:SetAttribute
    <effectList[1] >moduleName
    <effectList[2] >varName
    <effectList[3] >newValue

    <moduleName @ParseModuleList >modules

    <modules 0 do
        <modules[i] >module
        <-*moduleBehaviors{<module} >behavior
        <behavior ".irpl" EndsWith  <behavior StringLength eq0 || >useScript
        <-*allModules{<module} >numModules

        if(<useScript)
            <numModules 0 do
                <-*mainShip <moduleName i concat GetChild >moduleUnit
                <moduleUnit <behavior <varName <newValue SetScriptVar
            loop
        else
            <-*mainShip <behavior <varName <newValue SetControllerArg
        endif
        "StatsUpdated" <module <varName <newValue 3 ListN SendMsg
    loop


:IncrementMultiplier
    <effectList[1] >moduleName
    <effectList[2] >varName
    <effectList[3] >incrementAmount

    <moduleName @ParseModuleList >modules

    <modules 0 do
        <modules[i] >module
        <-*moduleStats{<module}{<varName} >attributeStats
        if(<attributeStats)
            <attributeStats[2] <incrementAmount add >attributeStats[2]
        endif
    loop

    @UpdateStat

:MultiplyAttribute
    <effectList[1] >moduleName
    <effectList[2] >varName
    <effectList[3] >incrementAmount

    <moduleName @ParseModuleList >modules

    <modules 0 do
        <modules[i] >module
        <-*moduleStats{<module}{<varName} >attributeStats
        if(<attributeStats)
            <attributeStats[3] <incrementAmount mul >attributeStats[3]
        endif
    loop

    @UpdateStat

# Updates the vars on the script or controller assigned as the module behavior 
# To match the value in the stat.
:UpdateStat
    #>varName >moduleName

    #<moduleName @ParseModuleList >modules

    <modules dup trace 0 do
        <modules[i] >module
        <-*moduleBehaviors{<module} >behavior
        <behavior ".irpl" EndsWith  <behavior StringLength eq0 || >useScript
        <-*allModules{<module} >numModules

        # Calculate the current value of the stat
        <-*moduleStats{<module}{<varName} >statList
        <statList[0] <statList[1] add <statList[2] mul <statList[3] mul 4 round >attributeValue

        if(<useScript)
            <numModules 0 do
                <-*mainShip <module i concat GetChild >moduleUnit
                <moduleUnit <behavior <varName <attributeValue dup trace SetScriptVar
            loop
        else
            <-*mainShip <behavior <varName <attributeValue SetControllerArg
        endif
        "StatsUpdated" <module <varName <attributeValue 3 ListN SendMsg
    loop


:BanUpgrade
    <effectList[1] >upgradeId
    true ->*bannedUpgrades{<upgradeId}

:BanModule
    <effectList[1] >moduleName
    true ->*bannedModules{<moduleName}

:SendMessage
    <effectList[1] >messageChannel
    <effectList[2] >data
    <messageChannel <data SendMsg

:AddBehavior
    <effectList[1] >moduleName
    <effectList 2 do
        <effectList[i]
        if(dup asfloat)
            asfloat
        endif
    loop
    List >behavior
    SendMsg("AddBehavior" <moduleName <behavior 2 ListN dup trace)

:RemoveBehavior
    <effectList[1] >moduleName
    <effectList[2] >behaviorName

    "RemoveBehavior" <moduleName <behaviorName 2 ListN SendMsg

:ParseModuleList
    >moduleName
    if(<moduleName "all" eq)
        <-*allModules GetTableKeys
    else if(<moduleName "unbanned" eq)
        <-*allModules GetTableKeys >modules
        -1 <modules 1 sub do
            if(<-*bannedModules{<modules[i]})
                <modules i RemoveListElement
            endif
        loop
        <modules
    else if(<moduleName "not_" StartsWith)
        <moduleName "not_" "" StringReplace >moduleName
        <-*allModules GetTableKeys >modules
        -1 <modules 1 sub do
            if(<modules[i] <moduleName eq)
                <modules i RemoveListElement
            endif
        loop
        <modules
    else
        <moduleName RemoveWhiteSpace ";" Split
    endif endif endif

:ForEachArtifactOn
    <effectList[1] >moduleName

    <moduleName @ParseModuleList >aModules

    <effectList 2 do
        <effectList[i]
    loop
    List >effectList

    <aModules 0 do
        <aModules[i] >module

        # Save this effect to apply when this module gets a new artifact
        if(<artifactEffects <module TableContainsKey !)
            CreateList >artifactEffects{<module}
        endif
        <artifactEffects{<module} <effectList AppendToList

        <-*weaponArtifacts{<module} GetListCount 0 do
            @ApplyEffect
        loop
    loop

:ForEachLevel
    <effectList 1 do
        <effectList[i]
    loop
    List >effectList

    # Save this effect to apply when we level up again
    <levelEffects <effectList AppendToList

    <-*shipLevel 0 do
        # Apply the effect for each level we have now
        @ApplyEffect
    loop

:IncConfig
    <effectList[1] >config
    <effectList[2] >value
    <effectList[3] >cascade

    <-*mainShip List
    if(<cascade AsInt)
        dup <-*mainShip GetChildren AppendListToList
    endif
    >parts

    <parts 0 do
        <parts[i] <config dup2 GetUnitProperty <value asfloat add SetUnitProperty
    loop

:MulConfig
    <effectList[1] >config
    <effectList[2] >value
    <effectList[3] >cascade

    <-*mainShip List
    if(<cascade AsInt)
        dup <-*mainShip GetChildren AppendListToList
    endif
    >parts

    <parts 0 do
        <parts[i] <config dup2 GetUnitProperty <value asfloat mul SetUnitProperty
    loop

:SetConfig
    <effectList[1] >config
    <effectList[2] >value
    <effectList[3] >cascade

    <-*mainShip List
    if(<cascade AsInt)
        dup <-*mainShip GetChildren AppendListToList
    endif
    >parts

    <parts 0 do
        <parts[i] <config <value asfloat SetUnitProperty
    loop
    
:WeaponArtifactGet
    >module

    <artifactEffects{<module} >allEffects
    <allEffects 0 do
        <allEffects[i] >effectList
        @ApplyEffect
    loop

:ParseEffect
    ", " "," StringReplace "," Split >effects
    <effects 0 do
        <effects[i] "/" Split >effects[i]
    loop
    <effects