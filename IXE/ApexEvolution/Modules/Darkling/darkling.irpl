# Dark ray for AEV
# Spins in a circle and destroys things. What's not to love?

$FIRE_RANGE:40
$SPIN_TIME:600 # Frames for one rotation
$shot_damage_distance:1.0
$shot_damage:1.3 # Depth PER FRAME
$NUM_BEAMS:1
$FIRE_COST:0.1

# Flag set by a weapon artifact
$singleBeam:0

$uptime:1
$downtime:0

if(<FIRE_RANGE <lastRange neq)
    @UpdateRange
endif

if(<singleBeam)
    once
        <NUM_BEAMS AsInt 1 do
            Self <beams[i] DestroyBeam
        loop
    endonce
endif

Sys_Operable

<NUM_BEAMS 1 max >NUM_BEAMS

if(Self GetUnitDirection <lastDir neq)
    # Flip
    Self dup GetRotation 90 add neg 90 sub SetRotation 
    Self GetUnitDirection >lastDir
endif

if(GetTimer0 eq0 <downtime &&)
    <up ! >up
    if(<up)
        <uptime SetTimer0
    else
        <downtime SetTimer0
    endif
endif

Self dup GetRotation 360.0 <SPIN_TIME div add dup >rot SetRotation

if(<up !)
    return
endif

if(Self GetAmmo <FIRE_COST gte)
    <NUM_BEAMS AsInt 0 do
        if(i <singleBeam && !)
            @ManageBeam(i)
        endif
    loop

    Self <FIRE_COST ConsumeAmmo
endif

:ManageBeam
    >beamNum
    if(<beams GetListCount i lte)
        @MakeNewBeam
    endif
    <beams[<beamNum] >beam
    Self GetPosition >pos
    Self <beam <shot_damage_distance SetBeamWidth 
    Self <beam <pos SetBeamStart
    <rot 360 <NUM_BEAMS asfloat div <beamNum mul add >beamRot
    <beamRot Deg2Rad mul dup cos swap sin V2 dup normalize >forward <FIRE_RANGE mul Self GetPosition add >beamEnd
    Self <beam <beamEnd SetBeamEnd
    Self <beam true SetBeamEnabled

    GetCreeperOnLine(Self <beamRot <FIRE_RANGE V2(-1 -1) false) >creeper
    if(<creeper.x gte0)
        if(Self <beamEnd EV2 GetLOS !)
            # Check along the rest of the beam for LOS
            <creeper <pos Distance >startDist
            <creeper >target
            <FIRE_RANGE <startDist sub 0 do
                <target <forward add >target
                Self <target EV2 GetLos ! <pos <target Distance <fire_range gt || if
                    break
                endif
            loop 
            #<target dup <pos Distance " " swap trace3
        else
            <beamEnd >target
        endif

        #<target trace
        # Damage the creeper
        RandFloat <-*criticalChance lt >crit
        <creeper <target <shot_damage_distance <shot_damage if(<singleBeam) <NUM_BEAMS mul endif 
        if(<crit) 1.5 mul swap 2 mul swap endif
        @DamageCreeperOnLine
    endif



:DamageCreeperOnLine
    >damageAmt >radius >lowPos >highPos
    0 >damageDealt
    if(<lowPos.y <highPos.y gt)
        <lowPos
        <highPos >lowPos
        >highPos
    endif
    <highPos.y <lowPos.y 0.1 add max >highPos.y 

    <highPos <lowPos sub EV2 atan2 >angle
    <radius <angle cos abs 0.001 max dup2 div abs >r
    mul abs >r2
    <radius <angle sin abs 0.001 max mul abs >rY

    <highPos.x <lowPos.x
    dup2 sub >dx
    dup2 max <r2 add >maxX
    min <r2 sub >minX

    #<minX " " <maxX trace3
    <highPos.y <lowPos.y sub >dy

    <lowPos.y <radius sub floor @lineX >lastX

    # Count creeper in the whole rectangle we're in, so we can do it in one RPL call    
    <minX <lowPos.y <rY sub floor <maxX <highPos.y <rY add 1 add V4 >area
    
    <area false false GetCreeperInArea >creeper
    
    #<highPos.y <lowPos.y do 
    <area.3 <area.1 do
        # Figure out the bounds for the X loop for this row, which is
        # From <radius before where the line enters this Y value, to <radius after it leaves.

        # Given two points (x1, y1) and (x2, y2), the equation for the line through those points is:
        # y - y1 = (y2 - y1) / (x2 - x1) * (x - x1)

        # Since we have Y and are solving for X, we get:
        # x = (y - y1) / (y2 - y1) * (x2 - x1) + x1

        # That equation is @lineX below. Using that, we get:

        if(<angle lt0)
            <lastX <r add <maxX min >startIndex
            i 1 add <highPos.y min @lineX dup >lastX <r sub <minX max >endIndex
        else
            <lastX <r sub <minX max >startIndex
            i 1 add <highPos.y min @lineX dup >lastX <r add <maxX min >endIndex
        endif

        # Now we just iterate across.
        <endIndex <startIndex
        dup2 min >startIndex
        max 1 add <startIndex swap do
            i j 1 1 <damageAmt 
            -1000000 mul DamageCreeper
        loop
    loop

    <creeper <area false false GetCreeperInArea sub >damageDealt

    "GiveXp" <damageDealt SendMsg

:lineX
    <lowPos.y sub <dy div <dx mul <lowPos.x add

:MakeNewBeam
    CreateBeam(Self "darkray") >beam
    <beams <beam AppendToList
    Self <beam true SetBeamAutoDisable
    SetBeamCapVertices(Self <beam 5)

:Once
    Self true EnableLos
    Self 180 SetRotation
    CreateList >beams
    true >up

:GameLoaded
    #CreateList >beams
    <NUM_BEAMS 0 do
        @MakeNewBeam
    loop
    List >beams

:Awake
    @UpdateRange

:UpdateRange
    <FIRE_RANGE >lastRange
    #Self 2 SetLosSandPassBits
    Self <FIRE_RANGE 1 add SetLosRange
    Self <FIRE_RANGE SetShowRange
    Self V4(0.467 0.11 0.659 0.8) SetShowRangeColor
