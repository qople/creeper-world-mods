# Remade rocket module. 

$FIRE_COST:0.5
$FIRE_DELAY:100
$FIRE_RANGE:75
$SHOT_DAMAGE_COUNT:99999
$SHOT_DAMAGE_DISTANCE:8
$SHOT_DAMAGE:40.0

# Change RA range when the variable is updated mid-level
if(<FIRE_RANGE <lastRange neq)
    Self <FIRE_RANGE SetRaRange
    Self <FIRE_RANGE SetShowRange
    <FIRE_RANGE >lastRange
endif

# Everything below only happens while the part is active and healthy
Sys_Operable

if(GetTimer0 eq0)
    if(Self GetAmmo <FIRE_COST gte)
        @Fire >fireSuccess
        if(<fireSuccess)
            <FIRE_DELAY RandInt(-3 4) add SetTimer0
        else
            #Short timer if we don't find creeper, but not 0 to help avoid lag when no creeper is near.
            10 <FIRE_DELAY min RandInt(-3 4) add SetTimer0
        endif
    endif
endif


:Fire
    GetDeepestCreeper(Self false true) dup >position trace
    if(<position.x gte0)
        10 0 do
            <position RandInt(-10 11) RandInt(-10 11) V2 Add >newPos
            if(Self <newPos GetRaPath dup <newPos EV2 GetCreeper gt0 &&)
                >pathlist
                break
            else
                pop 0 >pathlist
            endif
        loop
        if(<pathlist eq0)
            Self <position GetRaPath >pathlist
        endif
        PlaySound("rocketfire" 1)
        # Create the unit
        "CreateShot" "rocket" Self 2 ListN SendMsg
        true return
    else
        false return
    endif
:Once
    #Vars in this list get copied to the bullet when we make it
    List("pathList" "SHOT_DAMAGE_COUNT" "SHOT_DAMAGE_DISTANCE" "SHOT_DAMAGE") >shotVars

:Awake
    Self true EnableRa
    Self <FIRE_RANGE SetShowRange
    Self V4(1 0 0 1) SetShowRangeColor
    Self <FIRE_RANGE SetRaRange
    <FIRE_RANGE >lastRange
